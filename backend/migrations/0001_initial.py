# -*- coding: utf-8 -*-
# Generated by Django 1.11.7 on 2018-04-06 07:42
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.SmallIntegerField(choices=[(1, '学生'), (2, '教师')], default=1, verbose_name='用户类型')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='课程名称')),
                ('status', models.SmallIntegerField(choices=[(1, '未提交'), (2, '待开始'), (3, '进行中'), (4, '已结束')], default=1, verbose_name='课程状态')),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('start_date', models.DateTimeField(blank=True, default=None, null=True, verbose_name='课程开始时间')),
                ('finish_date', models.DateTimeField(blank=True, default=None, null=True, verbose_name='课程结束时间')),
                ('group_members_min', models.IntegerField(default=1, verbose_name='团队成员下限')),
                ('group_members_max', models.IntegerField(default=20, verbose_name='团队成员上限')),
                ('detail', models.TextField(blank=True, default=None, null=True, verbose_name='课程详情')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='发布者(教师)')),
            ],
            options={
                'ordering': ('create_date',),
            },
        ),
        migrations.CreateModel(
            name='CourseArticle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='文章标题')),
                ('content', models.TextField(verbose_name='文章内容')),
                ('status', models.SmallIntegerField(choices=[(1, '创建中'), (3, '已发布')], default=1, verbose_name='文章状态')),
                ('is_task_article', models.BooleanField(default=False, verbose_name='任务文章')),
                ('deadline', models.DateField(blank=True, default=None, null=True, verbose_name='学生上交截止时间')),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='创建时间')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='article_set', to=settings.AUTH_USER_MODEL, verbose_name='文章作者')),
                ('belong', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='article_set', to='backend.Course')),
            ],
        ),
        migrations.CreateModel(
            name='CourseGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='小组名称')),
                ('status', models.SmallIntegerField(choices=[(1, '创建中'), (4, '已完成'), (7, '已锁定')], default=1, verbose_name='团队状态')),
                ('belong', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Course', verbose_name='本组所属课程')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='my_groups', to=settings.AUTH_USER_MODEL, verbose_name='组长')),
                ('members', models.ManyToManyField(related_name='added_groups', to=settings.AUTH_USER_MODEL, verbose_name='组员')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Evaluation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(verbose_name='评价内容')),
                ('final', models.BooleanField(default=False)),
                ('score', models.IntegerField(verbose_name='分数')),
                ('delete', models.BooleanField(default=False)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='GroupArticle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='文章内容')),
                ('status', models.SmallIntegerField(default=1, verbose_name='文章状态')),
                ('score', models.DecimalField(decimal_places=2, default=100.0, max_digits=5)),
                ('scoring_people', models.IntegerField(default=0)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='创建时间')),
                ('submit_date', models.DateTimeField(default=None, verbose_name='提交时间')),
                ('belong', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_article_set', to='backend.CourseArticle')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_article_set', to='backend.CourseGroup')),
            ],
        ),
        migrations.CreateModel(
            name='Invite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=10, verbose_name='邀请码')),
                ('choice', models.IntegerField(choices=[(1, '邀请加入团队'), (2, '邀请管理课程'), (3, '申请加入团队'), (4, '申请退出团队')], default=1)),
                ('course', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='code_set', to='backend.Course')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='send_code_set', to=settings.AUTH_USER_MODEL, verbose_name='邀请人')),
                ('group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='code_set', to='backend.CourseGroup')),
                ('invitee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='receive_code_set', to=settings.AUTH_USER_MODEL, verbose_name='受邀人')),
            ],
        ),
        migrations.AddField(
            model_name='evaluation',
            name='article',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.GroupArticle', verbose_name='评价的文章'),
        ),
        migrations.AddField(
            model_name='evaluation',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='作者'),
        ),
    ]
